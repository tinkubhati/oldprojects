package com.prodapt.restfulapp.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.prodapt.restfulapp.entities.Book;
import com.prodapt.restfulapp.exceptions.BookNotFoundException;
import com.prodapt.restfulapp.services.BookService;

@RestController
@RequestMapping("/api/v1/book")
public class BookController {
	@Autowired
	private BookService bookService;
	@Autowired(required=false)
	private Book book;

	// Retrieve All
	//localhost:8080/api/v1/book/allbooks
	@GetMapping("/allbooks")
	public List<Book> getAllBooks() {

		List<Book> books = null;
		try {
			books = bookService.getAllBooks();

		} catch (BookNotFoundException e) {

			System.out.println(e.getMessage());
			// e.printStackTrace();

		}
		return books;
	}

	// Retrieve By Id
	//localhost:8080/api/v1/book/12
	@GetMapping("/{id}")
	public Book getBook(@PathVariable("id") Integer bookId) {
		Book book = null;
		try {
			book = bookService.getBookById(bookId);
		} catch (BookNotFoundException e) {

			System.out.println(e.getMessage());
		}

		return book;

	}

	// Save Book
	//localhost:8080/api/v1/book/savebook
	@PostMapping("/savebook")
	public Book addBook(@RequestBody Book newBook) {

		return bookService.addBook(newBook);
	}

	// Retrieve By Name
	//localhost:8080/api/v1/book/name?name="You Can Win"
	@GetMapping("/name/{book}")
	public Book getBookByName(@RequestParam("bookName") String bookName) {
		book = null;
		try {
			book = bookService.getBookByName(bookName);
		} catch (BookNotFoundException e) {

			System.out.println(e.getMessage());
		}
		return book;
	}

	@GetMapping("/author")
	//localhost:8080/api/v1/book/author?author="ab verma"
	public List<Book> getBookByAuthor(@RequestParam("author") String author) {
		List<Book> books = null;
		try {
			books = bookService.getBookByAuthor(author);
		} catch (BookNotFoundException e) {

			System.out.println(e.getMessage());
		}
		return books;
	}

	// Retrieve by Publisher
	//localhost:8080/api/v1/book/publisher?publisher="me"
	@GetMapping("/publisher")
	public List<Book> getBookByPublisher( @RequestParam("publisher") String publisher) {
		List<Book> books = null;
		try {
			books = bookService.getBookByPublisher(publisher);
		} catch (BookNotFoundException e) {

			e.printStackTrace();
		}
		return books;
	}

	// UPDATE Book
	//localhost:8080/api/v1/book/updatebookdetails
	@PutMapping("/updatebookdetails")
	public Book updateBook(@RequestBody Book newBook) {
		book = null;
		try {

			book = bookService.updateBook(newBook);
		} catch (BookNotFoundException e) {

			e.printStackTrace();
		}
		return book;
	}

	// DELETE Book
	//localhost:8080/api/v1/book/deleytebookbyid/12
	@DeleteMapping("/deletebook/{id}")
	public String deleteBookById(@PathVariable("id") Integer bookId) {
		String deleteMessage = null;

		try {

			deleteMessage = bookService.deleteBookById(bookId);

		} catch (BookNotFoundException e) {

			e.printStackTrace();
		}
		return deleteMessage;
	}

}
